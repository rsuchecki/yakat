/*
 * Copyright 2016 rad.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package vsearchprocess;

import shared.Sequence;
/**
 *
 * @author rad
 */
public class MsaSequence extends Sequence{
    private boolean[] paddingArray;
    
    public MsaSequence(String id, String sequenceString) {
        super(id, sequenceString);
    }
    
    
    
        /**
     * For a given sequence specify which positions are padding generated by the MSA
     *
     * @param sequence
     * @param maxIndelLength
     * @param minIndelDistFromEnds
     * @return padding boolean array
     */
    public boolean[] getPaddingArray(int maxIndelLength, int minIndelDistFromEnds) {
        if(paddingArray == null ) {
            generatePaddingArray( maxIndelLength, minIndelDistFromEnds);
        }
        return paddingArray;
    }
    
    public void generatePaddingArray(int maxIndelLength, int minIndelDistFromEnds) {
        //record positions regarded as padding (rather than indels)
        int alnLen = this.getLength();
        paddingArray = new boolean[alnLen];
//            System.err.println(sequence.getSequenceString());
        //PROVISIONALLY TREAT ALL "-" AS PADDING
        for (int j = 0; j < alnLen; j++) {
            if (this.getSequenceString().charAt(j) == '-') {
                paddingArray[j] = true;
            }
        }
        int padLength = 0;
        for (int positionInSeq = 0; positionInSeq < paddingArray.length + 1; positionInSeq++) {
            boolean processingLastPosition = false;
            if (positionInSeq == paddingArray.length) {  //Get last position
                processingLastPosition = true;
            }
            if (!processingLastPosition && paddingArray[positionInSeq]) {
                padLength++;
            } else {
                //IF padding strech shorter than maxIndelLength THEN it may be an indel and not padding
                if (padLength > 0 && padLength <= maxIndelLength) {
                    boolean headPadding = false;
                    for (int positionInPadStretch = padLength; positionInPadStretch > 0; positionInPadStretch--) {
                        //IGNORE indels adjacent to SEQ ENDS, that is, treat them as alignment padding
                        if (positionInSeq - positionInPadStretch < minIndelDistFromEnds || headPadding || positionInSeq > alnLen - minIndelDistFromEnds) {
                            headPadding = true;
//                                System.err.println("Not unpadding pos = " + (positionInSeq - positionInPadStretch + 1) + " in seq " + sequence.getIdentifierString());
                            break; //IF WE CLASS THIS POSITION AS PADDING, THE REST OF THE STRETCH IS PADDING AS WELL                                
                        } else {
                            paddingArray[positionInSeq - positionInPadStretch] = false;
                            headPadding = false;
//                                System.err.println("Unpadding pos = " + (positionInSeq - positionInPadStretch + 1) + " in seq " + sequence.getIdentifierString());
                        }
                    }
                }
                padLength = 0;
            }
        }
    }
    
}
